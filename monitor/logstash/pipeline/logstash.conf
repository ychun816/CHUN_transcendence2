# Logstash Pipeline Configuration
# This file defines how logs flow through Logstash: Input -> Filter -> Output

# INPUT: Where logs come from
input {
  # HTTP input - for applications to send logs directly
  #accept JSON HTTP POSTs at port 5000
  http {
    port => 5000
    codec => json
    add_field => { "input_type" => "http" }
  }
  
  # TCP/Beats input - for agents like Filebeat
  # Accept Beats protocol on 5044 (Filebeat) or newline-delimited JSON over TCP if desired.
  beats {
    port => 5044
    ssl => true
    ssl_certificate => "/usr/share/logstash/certs/logstash.crt"
    ssl_key => "/usr/share/logstash/certs/logstash.key"
    add_field => { "input_type" => "beats" }
  }
  
  # File input - for reading log files (optional) #option to read files
  # file {
  #   path => "/var/log/app/*.log"
  #   start_position => "beginning"
  #   codec => json
  #   add_field => { "input_type" => "file" }
  # }
}

# FILTER: How to process and transform logs
#Adds a timestamp when missing, adds environment and application fields, lowercases the level field, and removes noisy fields like headers and host.
filter {
  # Parse JSON logs
  if [input_type] == "http" or [input_type] == "tcp" {
    # Already JSON, just add timestamp if missing
    if ![timestamp] {
      mutate {
        add_field => { "timestamp" => "%{@timestamp}" }
      }
    }
  }
  
  # Add application context
  mutate {
    add_field => { 
      "environment" => "development"
      "application" => "transcendence"
    }
  }
  
  # Parse log levels
  if [level] {
    mutate {
      lowercase => [ "level" ]
    }
  }
  
  # Remove unnecessary fields
  mutate {
    remove_field => [ "headers", "host" ]
  }
}

# OUTPUT: Where processed logs go
#index events into ES with index name transcendence-logs-YYYY.MM.dd.
output {
  # Send to Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "transcendence-logs-%{+YYYY.MM.dd}"
    # Templates are managed separately (monitor/elasticsearch/*). Only index is set here.
  }
  
  # Debug output (remove in production)
  stdout {
    codec => rubydebug
  }
}


#### Common mutate operations ####################################

# add_field — add a new field (or append a value if field exists).
# remove_field — drop fields you don’t want indexed.
# rename — rename a field.
# replace — set (overwrite) a field’s value.
# update — more conditional update (only if present).
# convert — cast field types (e.g., "integer").
# lowercase / uppercase — change string case.
# gsub — regex replace inside a string.
# join / split — stringify or split arrays/strings.

##################################################################  